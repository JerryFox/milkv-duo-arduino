1
00:00:00,650 --> 00:00:02,630
Hello everyone, I am from Pu'er Technology

2
00:00:02,630 --> 00:00:05,290
Wang Junqiang of , and then today by

3
00:00:05,290 --> 00:00:06,950
Let me introduce Arduino to you

4
00:00:08,170 --> 00:00:11,750
Each on RG200X

5
00:00:11,750 --> 00:00:12,770
kind of gameplay.

6
00:00:14,350 --> 00:00:17,790
So this is now accessible

7
00:00:17,790 --> 00:00:20,890
of each link, then the first

8
00:00:20,890 --> 00:00:23,370
It's the one who faces the threat

9
00:00:23,370 --> 00:00:25,350
For quick use of Arduino

10
00:00:25,350 --> 00:00:29,030
manual, the second one is the one that needs to be updated

11
00:00:29,030 --> 00:00:30,950
New image, and now we have the main

12
00:00:30,950 --> 00:00:33,530
We need to make progress in that makeway

13
00:00:33,530 --> 00:00:38,410
line test, and then the third one is that

14
00:00:38,410 --> 00:00:41,490
Available source code, fourth

15
00:00:41,490 --> 00:00:44,090
The first is some Arduino syntax

16
00:00:44,090 --> 00:00:46,650
Or some specifications for programming,

17
00:00:47,690 --> 00:00:49,470
Then this introduction will mainly focus on

18
00:00:49,470 --> 00:00:52,770
Introducing Arduino and RG20

19
00:00:52,770 --> 00:00:56,050
Various implementations on 0X

20
00:00:56,050 --> 00:00:58,550
and and to get started quickly, and then and

twenty one
00:00:58,550 --> 00:01:00,130
Some demonstrations of vision.

twenty two
00:01:02,110 --> 00:01:05,110
Then Arduino is a very popular

twenty three
00:01:05,110 --> 00:01:06,790
Welcome, convenient and flexible one

twenty four
00:01:06,790 --> 00:01:09,110
Open source electronic prototyping platform,

25
00:01:10,390 --> 00:01:12,410
It mainly includes two aspects, one is

26
00:01:12,410 --> 00:01:14,810
On the one hand, it’s hardware, which is all kinds of Ar

27
00:01:14,810 --> 00:01:16,690
Duino board, like this picture

28
00:01:16,690 --> 00:01:19,810
The dish is a very classic Ar

29
00:01:19,810 --> 00:01:22,310
duino development board, but with

30
00:01:22,310 --> 00:01:25,430
That one where everyone uses Arduino

31
00:01:25,430 --> 00:01:28,810
Pansexual, then nano series

32
00:01:28,810 --> 00:01:31,250
Those boards are getting more and more popular now

33
00:01:31,250 --> 00:01:33,530
The more there are, the more representative

34
00:01:33,530 --> 00:01:35,430
The representative one is ESP32 or

35
00:01:35,430 --> 00:01:37,910
It’s the Raspberry Pi RP20

36
00:01:37,910 --> 00:01:41,750
40 such plate types, including what we want

37
00:01:41,750 --> 00:01:43,350
The DAW used also belongs to

38
00:01:43,350 --> 00:01:45,450
This kind of board type, then Arduino also has

39
00:01:45,450 --> 00:01:47,010
The corresponding software is Arduino

40
00:01:47,010 --> 00:01:50,830
of IEE, and this IEE is larger

41
00:01:50,830 --> 00:01:53,330
Major reduction in developer staff

42
00:01:53,330 --> 00:01:55,970
Yes, they are non-professional developers

43
00:01:55,970 --> 00:01:58,190
The use of members, because it

44
00:01:58,190 --> 00:02:00,490
About the development board or about

45
00:02:00,490 --> 00:02:02,450
Library, you can actually download it directly

46
00:02:02,450 --> 00:02:05,430
Download, which greatly facilitates non-specialists

47
00:02:05,430 --> 00:02:07,410
used by professionals, so in

48
00:02:07,410 --> 00:02:10,270
Just various artistic creations or

49
00:02:10,270 --> 00:02:13,390
It's amateur on behalf of amateur

50
00:02:13,390 --> 00:02:14,910
Among coders, Arduino is very

51
00:02:14,910 --> 00:02:18,890
Popular ones include universities like Tsinghua University

52
00:02:18,890 --> 00:02:20,630
The Academy of Fine Arts also uses Arduino to make

53
00:02:20,630 --> 00:02:25,590
some art displays, and then just

54
00:02:25,590 --> 00:02:27,250
Just spoke the language of Arduino,

55
00:02:27,310 --> 00:02:28,350
Arduino language for convenience

56
00:02:28,350 --> 00:02:30,310
Just use it, it actually does some

57
00:02:30,310 --> 00:02:33,570
Separately, and then the inner wall is actually not

58
00:02:33,570 --> 00:02:36,770
A lot, just include that number

59
00:02:36,770 --> 00:02:38,410
IO and analog IO inputs

60
00:02:38,410 --> 00:02:40,670
output, then include that PWM

61
00:02:40,670 --> 00:02:42,870
Or include some comprehensive battles and openings

62
00:02:42,870 --> 00:02:45,510
codes, but these are actually for

63
00:02:45,510 --> 00:02:49,050
Ordinary users, in fact, don’t need it

64
00:02:49,050 --> 00:02:50,330
Pay attention to the underlying mechanism, as long as

65
00:02:50,330 --> 00:02:52,650
It's the upper layer of the upper layer.

66
00:02:52,650 --> 00:02:54,710
interface is enough, and then it also has

67
00:02:54,710 --> 00:02:56,690
Some of my own structures, including the most

68
00:02:56,690 --> 00:02:59,550
The most typical ones are loop and

69
00:02:59,550 --> 00:03:01,530
setup, these two are Arduino

70
00:03:01,530 --> 00:03:05,090
is the setup and loop process

71
00:03:05,090 --> 00:03:08,050
Preface can be said to be the job of Arduino

72
00:03:08,050 --> 00:03:10,750
of one core and then more

73
00:03:10,750 --> 00:03:12,970
You can check the information on the official website

74
00:03:12,970 --> 00:03:16,010
Look, the various syntaxes and uses

75
00:03:16,010 --> 00:03:21,570
Example, then just now Wei also

76
00:03:21,570 --> 00:03:23,970
Introducing the SGA200X

77
00:03:23,970 --> 00:03:29,210
configuration, then our Arduino

78
00:03:29,210 --> 00:03:33,370
In fact, it mainly runs on its

79
00:03:33,370 --> 00:03:37,730
On a 700 MB small box, no matter

80
00:03:37,730 --> 00:03:39,590
Does the big box use Linux?

81
00:03:39,590 --> 00:03:43,110
If you use ARM, you can actually support Ar.

82
00:03:43,110 --> 00:03:51,360
duino, and then our main implementation

83
00:03:51,360 --> 00:03:52,840
The current object is Makeway

84
00:03:52,840 --> 00:03:56,280
Dock, we can take a look at that

85
00:03:56,280 --> 00:03:59,980
Some of the resources provided, it has

86
00:03:59,980 --> 00:04:02,260
40 pins provide a rich

87
00:04:02,260 --> 00:04:04,660
peripheral resources, including 26

88
00:04:04,660 --> 00:04:07,140
GPIO, including Transl

89
00:04:07,140 --> 00:04:09,340
ate,IPhone C,ADC,SPI

90
00:04:09,340 --> 00:04:14,460
For these commonly used interfaces, we

91
00:04:14,460 --> 00:04:18,240
These will be used for practice below.

92
00:04:18,240 --> 00:04:26,200
Test, currently Arduino is running on SGA200

93
00:04:26,200 --> 00:04:30,260
On X, Ar has been realized

94
00:04:30,260 --> 00:04:31,320
duino universal language API

95
00:04:31,320 --> 00:04:34,820
Some encapsulation and usage are already basic

96
00:04:34,820 --> 00:04:37,220
All APIs are covered,

97
00:04:37,620 --> 00:04:40,560
In addition to not supporting USB, USB

98
00:04:40,560 --> 00:04:42,600
Mainly keyboard and mouse,

99
00:04:44,760 --> 00:04:48,560
On this board we temporarily

100
00:04:48,560 --> 00:04:50,860
Didn't try it out and then set it up

101
00:04:50,860 --> 00:04:52,840
The equipment's support is mainly GP

102
00:04:52,840 --> 00:04:55,200
IO, IC, serial port, SPI, etc.,

103
00:04:55,500 --> 00:04:58,760
They are all commonly used and very, very

104
00:04:58,760 --> 00:05:01,340
equipment that is easy to operate, and then

105
00:05:01,340 --> 00:05:03,100
Internal Camera and Terminal US

106
00:05:03,100 --> 00:05:06,740
In fact, some adaptations have been made, yes

107
00:05:06,740 --> 00:05:08,560
For users, it is just a common

108
00:05:08,560 --> 00:05:10,860
For some common ones, Camera can be used

109
00:05:10,860 --> 00:05:12,580
Common Delay function, others

110
00:05:12,580 --> 00:05:14,040
Maybe it's some internal interfaces,

111
00:05:15,120 --> 00:05:19,300
Then on the board type, our current main

112
00:05:19,300 --> 00:05:21,040
If it supports DOR series, including

113
00:05:21,040 --> 00:05:23,240
DOR64 and DOR256,

114
00:05:23,580 --> 00:05:24,920
DOROS is also in progress,

115
00:05:25,840 --> 00:05:27,560
And then there will be more

116
00:05:27,560 --> 00:05:34,180
Board Type, About Arduino in SD

117
00:05:34,180 --> 00:05:39,580
Implementation on 200X, because in fact

118
00:05:39,580 --> 00:05:43,480
From this main process

119
00:05:43,480 --> 00:05:47,420
Look, Arduino on SD200X

120
00:05:47,420 --> 00:05:50,840
The implementation is similar to others, such as

121
00:05:50,840 --> 00:05:52,440
ESP32 or other boards

122
00:05:52,440 --> 00:05:54,540
is different because its

123
00:05:54,540 --> 00:05:56,680
The big core is always running

124
00:05:56,680 --> 00:05:58,280
process, and we are just running on

125
00:05:58,280 --> 00:06:00,400
During the small core process, nothing else is done

126
00:06:00,400 --> 00:06:02,420
Is it single-core or dual-core?

127
00:06:02,420 --> 00:06:05,760
In fact, it needs to be reprogrammed every time.

128
00:06:05,960 --> 00:06:08,980
Then restart, and then our

129
00:06:08,980 --> 00:06:11,860
The implementation process is to maintain

130
00:06:11,860 --> 00:06:14,080
The big core runs continuously, and then

131
00:06:14,080 --> 00:06:15,440
It can be done continuously on small cores

132
00:06:15,440 --> 00:06:20,080
To switch between various programs, we

133
00:06:20,080 --> 00:06:21,680
The main process is to obtain

134
00:06:21,680 --> 00:06:26,180
Take the support of Arduino, and then this basic

135
00:06:26,180 --> 00:06:27,440
via HTTP protocol

136
00:06:27,440 --> 00:06:30,080
Download it from the Internet and open it

137
00:06:30,080 --> 00:06:33,040
Go to the URL we mentioned, and then update

138
00:06:33,040 --> 00:06:36,180
New to Arduino IDE, Ar

139
00:06:36,180 --> 00:06:38,880
duino IDE can edit various

140
00:06:38,880 --> 00:06:43,060
IOM is the Arduino APP, which is

141
00:06:43,060 --> 00:06:45,040
ERF file and then burn it via

142
00:06:45,040 --> 00:06:50,300
Write tool to program the tool

143
00:06:50,300 --> 00:06:53,300
On the physical equipment, the programming work

144
00:06:53,300 --> 00:06:55,940
The tool uses the window protocol,

145
00:06:56,080 --> 00:06:57,900
But this window is a USB transfer

146
00:06:57,900 --> 00:07:00,500
Come over to the virtual window and then

147
00:07:00,500 --> 00:07:04,660
On the big core we use a

148
00:07:04,660 --> 00:07:07,160
Flashing service to pass

149
00:07:07,160 --> 00:07:10,020
Letter, burning service is responsible for

150
00:07:10,020 --> 00:07:13,820
Saving and updating Arduino

151
00:07:13,820 --> 00:07:18,240
firmware, then via NuxN

152
00:07:18,240 --> 00:07:19,860
The mechanism of ex starts it in

153
00:07:19,860 --> 00:07:22,600
On the small core, and here is us

154
00:07:22,600 --> 00:07:24,860
and other implementations have a

155
00:07:24,860 --> 00:07:26,840
The difference is that the

156
00:07:26,840 --> 00:07:30,120
His ROM is fixed, then

157
00:07:30,120 --> 00:07:31,940
The ROM we implemented is actually

158
00:07:31,940 --> 00:07:33,920
A variable ROM is the root

159
00:07:33,920 --> 00:07:36,380
You can freely adjust it as needed

160
00:07:36,380 --> 00:07:39,920
The size of the ROM, for example

161
00:07:39,920 --> 00:07:43,140
Some libraries, like U8GR library

162
00:07:43,140 --> 00:07:45,640
Relatively large, with some Chinese characters

163
00:07:45,640 --> 00:07:47,160
The symbol libraries are relatively large.

164
00:07:47,160 --> 00:07:48,900
We don’t need to do unpacking, we can do it directly

165
00:07:48,900 --> 00:07:51,900
To run it for you, here we

166
00:07:51,900 --> 00:07:54,220
Arduino running space

167
00:07:54,220 --> 00:07:56,220
It overlaps with VirtuoS

168
00:07:56,220 --> 00:07:58,700
of, so VirtuoS and Ar

169
00:07:58,700 --> 00:08:01,540
Only one duino can exist, default

170
00:08:01,540 --> 00:08:05,780
In case, DOOR is from 83F

171
00:08:05,780 --> 00:08:07,860
4 starts, and 256 starts with

172
00:08:07,860 --> 00:08:12,220
Starting from 8FE, go to 256

173
00:08:12,220 --> 00:08:13,820
There may be room for two moves

174
00:08:13,820 --> 00:08:15,760
Run it on Arduino, then DOOR

175
00:08:15,760 --> 00:08:19,520
It's probably over 70K,

176
00:08:22,100 --> 00:08:26,720
Over seven hundred K, of course this space

177
00:08:26,720 --> 00:08:29,180
Can be based on the mirror inside

178
00:08:29,180 --> 00:08:34,309
Configure free adjustment, and then just

179
00:08:34,309 --> 00:08:35,850
Speaking of programming program, programming

180
00:08:35,850 --> 00:08:40,950
Of course, the program also burns with other programs.

181
00:08:40,950 --> 00:08:43,130
It’s written differently, it’s generally burned

182
00:08:43,130 --> 00:08:46,690
Everything is written in ROM, or

183
00:08:46,690 --> 00:08:49,370
There is a remarkable process

184
00:08:49,370 --> 00:08:52,070
The programmer is responsible for programming, but because we

185
00:08:52,070 --> 00:08:53,330
Now it’s through Docker

186
00:08:53,330 --> 00:08:55,310
Control, so it is burning the program

187
00:08:55,310 --> 00:08:57,350
can be simplified into a programmed

188
00:08:57,350 --> 00:08:59,290
Service, programming program mainly

189
00:08:59,290 --> 00:09:00,870
Responsible for serial port monitoring, and then

190
00:09:00,870 --> 00:09:01,990
A lot of updates, and some small cores

191
00:09:01,990 --> 00:09:07,590
Control, Docker to update

192
00:09:07,590 --> 00:09:09,510
program, and then stop the small core

193
00:09:09,510 --> 00:09:11,190
Arduino runs, then updates Ar

194
00:09:11,190 --> 00:09:13,090
duino, and start the new Ar

195
00:09:13,090 --> 00:09:16,470
To run duino, the process is

196
00:09:16,470 --> 00:09:18,010
During the operation of the large core

197
00:09:18,010 --> 00:09:19,950
Can be constantly replaced and updated

198
00:09:19,950 --> 00:09:22,030
Change the Arduino we are running.

199
00:09:27,000 --> 00:09:29,260
From a source code perspective, we source

200
00:09:29,260 --> 00:09:32,700
The code is open source, you can see the class

201
00:09:32,700 --> 00:09:33,860
similar directory structure, and then this

202
00:09:33,860 --> 00:09:35,860
Ad in some directory structures

203
00:09:35,860 --> 00:09:37,380
There are traces of reno everywhere

204
00:09:37,380 --> 00:09:39,540
Inside SGR's roster, then

205
00:09:39,540 --> 00:09:42,720
Related documentation implementation and

206
00:09:42,720 --> 00:09:45,760
Some examples are in BLC’s

207
00:09:45,760 --> 00:09:49,540
directory, and then the current extension

208
00:09:49,540 --> 00:09:51,300
In the exhibition library, we only support

209
00:09:51,300 --> 00:09:57,340
Libraries for SPI and FMC, but

210
00:09:57,340 --> 00:10:00,180
More libraries are actually available to us

211
00:10:00,180 --> 00:10:03,380
It is being modified, and then everyone needs to

212
00:10:03,380 --> 00:10:05,880
active participation, and then concretely

213
00:10:05,880 --> 00:10:07,420
Which libraries are used or where?

214
00:10:07,420 --> 00:10:08,760
Which libraries are more popular?

215
00:10:08,760 --> 00:10:10,380
You can contribute and submit.

216
00:10:12,080 --> 00:10:16,500
Then the other tool directories are

217
00:10:16,500 --> 00:10:19,040
Put some programming tools, and then

218
00:10:19,040 --> 00:10:21,920
Some used packaging

219
00:10:21,920 --> 00:10:24,980
some scripts, and then include the layout configuration

220
00:10:24,980 --> 00:10:28,000
The settings are all in a directory below this

221
00:10:28,000 --> 00:10:31,420
Record, and then configure the version level of the IDE

222
00:10:31,420 --> 00:10:34,660
Instructions or how to configure

223
00:10:34,660 --> 00:10:36,520
The programming tools are all in these

224
00:10:36,520 --> 00:10:39,300
In TST, these are actually if

225
00:10:39,300 --> 00:10:42,340
To add a new version, actually

226
00:10:42,340 --> 00:10:43,620
Just modify these two items

227
00:10:43,620 --> 00:10:45,440
record, and then add related

228
00:10:45,440 --> 00:10:47,480
Just configure it, and then mainly build

229
00:10:47,480 --> 00:10:50,440
The construction process is actually and commonly used

230
00:10:50,440 --> 00:10:52,220
The Arduino programs are all the same

231
00:10:52,220 --> 00:10:56,520
Yes, it is the testing library and then production

232
00:10:56,520 --> 00:10:58,060
Chinese character metatype, compilation project,

233
00:10:58,140 --> 00:10:59,740
Edit the library, compile the kernel, and then

234
00:10:59,740 --> 00:11:01,280
Finally packaged into an ERF,

235
00:11:05,380 --> 00:11:08,100
Then how to get started quickly, how to quickly

236
00:11:08,100 --> 00:11:12,020
If you get started quickly, it is actually the same as other

237
00:11:12,020 --> 00:11:15,720
His Arduino version is the same

238
00:11:15,720 --> 00:11:18,260
Yes, but we need to update it first

239
00:11:18,260 --> 00:11:20,760
Mirror, then install the IDE, and then

240
00:11:20,760 --> 00:11:22,960
Go to download the relevant JSON

241
00:11:22,960 --> 00:11:25,280
Put it in that directory, this

242
00:11:25,280 --> 00:11:28,200
In fact, you can refer to that Maker

243
00:11:28,200 --> 00:11:30,100
This guide document written by Bay,

244
00:11:32,100 --> 00:11:35,220
We can also take a look at this guide document,

245
00:11:41,020 --> 00:11:43,380
There is actually more detail here

246
00:11:43,380 --> 00:11:47,580
steps, mine may be better than

247
00:11:47,580 --> 00:11:49,420
More simplified, here is the following

248
00:11:49,420 --> 00:11:52,600
Where should I fill in the JSON?

249
00:11:52,600 --> 00:11:55,580
Enter, including installing the development board

250
00:11:55,580 --> 00:12:02,440
version, then select, in

251
00:12:02,440 --> 00:12:03,760
Here we choose what we want to write

252
00:12:03,760 --> 00:12:06,620
Development board, we can choose here

253
00:12:06,620 --> 00:12:08,580
Dock, you can choose R56, DOS

254
00:12:08,580 --> 00:12:11,480
It is also being supported, and then you can proceed

255
00:12:11,480 --> 00:12:22,140
Burn and write, below

256
00:12:22,140 --> 00:12:26,820
We can go and demonstrate the relevant

257
00:12:26,820 --> 00:12:30,280
The interface will mainly cover

258
00:12:30,280 --> 00:12:32,460
GPIO,PWM,IPOC,

259
00:12:32,960 --> 00:12:37,180
SPI, and these can already be seen

260
00:12:37,180 --> 00:12:40,640
All interfaces, GPIO

261
00:12:40,640 --> 00:12:45,940
It's actually a very simple process

262
00:12:45,940 --> 00:12:49,860
sequence, GPIO, it is actually, you can

263
00:12:49,860 --> 00:12:51,620
Seeing the result is very simple

264
00:12:51,620 --> 00:12:53,740
Of, there are only three results, Pin

265
00:12:53,740 --> 00:12:56,920
Model to set specific P

266
00:12:56,920 --> 00:12:58,940
in mode, RTU operation

267
00:12:58,940 --> 00:13:00,640
There are actually two moving modes:

268
00:13:00,760 --> 00:13:02,240
One is input and the other is

269
00:13:02,240 --> 00:13:04,720
Output, pull-up and pull-down actually also

270
00:13:04,720 --> 00:13:06,700
There are corresponding settings,

271
00:13:09,500 --> 00:13:11,120
There are two more interfaces, behind them

272
00:13:11,120 --> 00:13:12,380
Read this Pin and write this P

273
00:13:12,380 --> 00:13:14,580
The value of in, the value of Pin is only

274
00:13:14,580 --> 00:13:15,620
Two types, one is higher and the other is higher

275
00:13:15,620 --> 00:13:20,640
It is low, like in the default program

276
00:13:20,640 --> 00:13:23,000
The Blink above is very simple.

277
00:13:23,120 --> 00:13:24,720
Set the model in Stub

278
00:13:24,720 --> 00:13:29,900
Formula, write in the loop

279
00:13:29,900 --> 00:13:32,380
high battery, then write low battery

280
00:13:32,380 --> 00:13:35,540
bottle so that a flashing

281
00:13:35,540 --> 00:13:35,880
Effect.

282
00:13:55,070 --> 00:13:59,470
Here I can actually see that I use

283
00:13:59,470 --> 00:14:04,490
is a custom pin because

284
00:14:04,490 --> 00:14:07,690
This may be because the wiring is relatively long or short.

285
00:14:14,620 --> 00:14:17,620
The Pin value here is the pin

286
00:14:17,620 --> 00:14:20,680
The value is the physical pin

287
00:14:20,680 --> 00:14:22,980
value, not physical pin 12

288
00:14:22,980 --> 00:14:25,460
345678,it is not GP

289
00:14:25,460 --> 00:14:27,340
The value of IO, because the GPIO

290
00:14:27,340 --> 00:14:29,020
The value is actually quite confusing,

291
00:14:29,340 --> 00:14:31,720
We choose physical pins to compare

292
00:14:31,720 --> 00:14:33,220
Convenient and fast to use,

293
00:14:33,580 --> 00:14:35,440
Because Arduino is different from other

294
00:14:35,440 --> 00:14:39,120
In this way, it divides the wheels of the upper layer into

295
00:14:39,120 --> 00:14:41,000
Number mapping, in fact, we are included

296
00:14:41,000 --> 00:14:43,500
The whole thing is already done, no need to change it

297
00:14:43,500 --> 00:14:45,500
Change, there is no need to convert others,

298
00:14:46,420 --> 00:14:48,380
Because Arduino is used directly, we

299
00:14:48,380 --> 00:14:49,940
Just select the physical pin,

300
00:14:50,100 --> 00:14:51,900
This may be more convenient.

301
00:14:55,060 --> 00:14:59,500
This is the simplest demonstration

302
00:14:59,500 --> 00:15:03,220
The program is directly programmed and programmed.

303
00:15:03,220 --> 00:15:04,540
The writing process can be mutated and run,

304
00:15:04,900 --> 00:15:11,010
Mutation and then programming again, you can

305
00:15:11,010 --> 00:15:15,650
I saw this has been posted to the board

306
00:15:15,650 --> 00:15:17,510
The above runs, and in this

307
00:15:17,510 --> 00:15:24,170
time, the board is still running

308
00:15:24,170 --> 00:15:28,430
Yes, the big core did not stop, the small core

309
00:15:28,430 --> 00:15:31,670
You can freely switch programs again,

310
00:15:35,850 --> 00:15:49,660
Let's modify it, and then we can

311
00:15:49,660 --> 00:15:53,140
Complete the use of GPIO.

312
00:15:54,460 --> 00:15:59,940
In addition to GPIO, PW

313
00:15:59,940 --> 00:16:03,380
M is a frequently used connector

314
00:16:03,380 --> 00:16:04,880
mouth, PWM we usually

315
00:16:04,880 --> 00:16:08,440
Use the motor to operate, then here

316
00:16:08,440 --> 00:16:10,020
The corresponding interface is simulation

317
00:16:10,020 --> 00:16:13,880
Quantitative output, where we add

318
00:16:13,880 --> 00:16:18,200
With the tranq interface, we

319
00:16:18,200 --> 00:16:19,680
Just testing tran

320
00:16:19,680 --> 00:16:22,740
The resistance slope of q, then the program also

321
00:16:22,740 --> 00:16:25,120
Because this directly operates the motor,

322
00:16:25,280 --> 00:16:27,840
This code is also very simple. The above

323
00:16:27,840 --> 00:16:30,520
Define two, which is ADC

324
00:16:30,520 --> 00:16:35,660
and blueberry pins, below is

325
00:16:35,660 --> 00:16:38,240
initialized tranq, and

326
00:16:38,240 --> 00:16:41,440
Print a character in the loop

327
00:16:41,440 --> 00:16:44,760
The surface can be read through, here

328
00:16:44,760 --> 00:16:49,100
I connected a soft coder, and then

329
00:16:49,100 --> 00:16:52,320
Code selector, you can select the code through

330
00:16:52,320 --> 00:16:53,520
to operate the motor.

331
00:16:55,500 --> 00:17:08,830
You can also take a look at the

332
00:17:08,830 --> 00:17:09,850
That's it.

333
00:17:13,900 --> 00:17:15,380
The tranq used here is

334
00:17:15,380 --> 00:17:17,760
tranq2, because tranq

335
00:17:17,760 --> 00:17:19,300
1 is currently occupied by the big core

336
00:17:19,300 --> 00:17:21,400
, so we now use tran

337
00:17:21,400 --> 00:17:24,380
q2, you can see that the program has

338
00:17:24,380 --> 00:17:27,260
is running, then we can pass

339
00:17:27,260 --> 00:17:33,000
Do this by rotating this

340
00:17:33,000 --> 00:17:34,620
By reading this rotation value

341
00:17:34,620 --> 00:17:41,310
Rotate, this is PW

342
00:17:41,310 --> 00:17:47,600
M interface, using PWM

343
00:17:47,600 --> 00:17:48,760
Modules we can operate more

344
00:17:48,760 --> 00:17:52,960
Clicks, like DOOR256

345
00:17:52,960 --> 00:17:55,600
If so, 12 connections have been provided

346
00:17:55,600 --> 00:17:58,740
mouth of PWM, we can go

347
00:17:58,740 --> 00:18:01,840
To make a robotic arm, you can make a machine

348
00:18:01,840 --> 00:18:02,900
Robots are all possible.

349
00:18:06,010 --> 00:18:08,470
Then for iPhoneC, iPhoneC

350
00:18:08,470 --> 00:18:10,030
and SPI is very commonly used

351
00:18:10,030 --> 00:18:13,970
Two interfaces, its functions may

352
00:18:13,970 --> 00:18:16,390
Compared with the previous interfaces

353
00:18:16,390 --> 00:18:18,690
There are many functions, but

354
00:18:18,690 --> 00:18:21,990
This is actually useful, or maybe

355
00:18:21,990 --> 00:18:23,830
The more useful ones are actually us

356
00:18:23,830 --> 00:18:26,730
What is often used is this

357
00:18:26,730 --> 00:18:30,670
Some, this is on a MacBook

358
00:18:30,670 --> 00:18:35,310
, a program for self-testing,

359
00:18:35,430 --> 00:18:37,110
This program is self-reading and self-writing,

360
00:18:37,510 --> 00:18:39,470
We will not run this, and then run

361
00:18:39,470 --> 00:18:42,730
You can run it yourself, and then

362
00:18:42,730 --> 00:18:44,170
We are on iPhoneC, our main

363
00:18:44,170 --> 00:18:46,150
If you want to do iPhoneC exercise

364
00:18:46,150 --> 00:18:48,090
For OLED screen testing,

365
00:18:49,390 --> 00:18:52,430
Here is the need to adapt to each

366
00:18:52,430 --> 00:18:59,710
A library for iPhoneC, like this

367
00:18:59,710 --> 00:19:02,450
SSD1306 library, it actually

368
00:19:02,450 --> 00:19:05,370
Did it for other chips

369
00:19:05,370 --> 00:19:07,170
Adaptation, and then we just do it here

370
00:19:07,170 --> 00:19:08,130
A simple adaptation to make it

371
00:19:08,130 --> 00:19:10,510
If it can pass through the edge, it can run

372
00:19:10,510 --> 00:19:10,810
stand up.

373
00:19:10,810 --> 00:19:12,930
Then the example here is directly

374
00:19:12,930 --> 00:19:17,170
Examples of the kind of OLED used

375
00:19:17,170 --> 00:19:17,870
son.

376
00:19:39,920 --> 00:19:42,440
You can see the implementation of the current program,

377
00:19:42,740 --> 00:19:46,020
In fact, it is directly connected to the simple one before

378
00:19:46,020 --> 00:19:48,300
Well, there is already a big difference.

379
00:19:49,700 --> 00:19:52,440
Here it is read directly, that is, using

380
00:19:52,440 --> 00:19:56,680
iPhoneCR to perform operations,

381
00:19:57,180 --> 00:19:59,960
When connected, this is actually an iPhone

382
00:19:59,960 --> 00:20:01,520
CR, to connect to this screen.

383
00:20:03,040 --> 00:20:05,760
Then this is to use, in fact, it is to use

384
00:20:05,760 --> 00:20:10,860
Use to convert to C element group, picture

385
00:20:10,860 --> 00:20:12,540
Convert to C element group to achieve,

386
00:20:12,740 --> 00:20:14,200
But if you use other libraries, it may be

387
00:20:14,200 --> 00:20:15,840
You can display it directly.

388
00:20:19,540 --> 00:20:22,400
Because it uses a library, like i

389
00:20:22,400 --> 00:20:23,320
PhoneCR interface, we are here

390
00:20:23,320 --> 00:20:24,940
The face is actually no longer visible, it

391
00:20:24,940 --> 00:20:26,940
It has been directly divided into various categories,

392
00:20:27,300 --> 00:20:28,500
Then we can directly call this

393
00:20:28,500 --> 00:20:30,520
With some interfaces, you can operate this

394
00:20:30,520 --> 00:20:30,880
Screen.

395
00:20:53,820 --> 00:20:56,960
As you can see here, the program has actually been updated

396
00:20:56,960 --> 00:21:01,240
It's new, of course we can try it too

397
00:21:01,240 --> 00:21:05,780
For others, go directly, this is a dynamic

398
00:21:05,780 --> 00:21:08,200
Pictures and dynamic pictures?

399
00:21:08,200 --> 00:21:13,080
Intermittent to switch data

400
00:21:13,080 --> 00:21:16,800
value, if you only want to display it once,

401
00:21:16,900 --> 00:21:18,160
We don’t need to be in the Loop

402
00:21:18,160 --> 00:21:22,120
To operate, we directly display a

403
00:21:22,120 --> 00:21:23,240
Just Zhang.

404
00:21:29,430 --> 00:21:31,870
Of course there needs to be more

405
00:21:31,870 --> 00:21:33,830
library adapter, this is what we

406
00:21:33,830 --> 00:21:38,190
I hope everyone will come and play, iOS and i

407
00:21:38,190 --> 00:21:41,350
One of the Phones is that there are more

408
00:21:41,350 --> 00:21:43,110
Multiple libraries can be mentioned, or

409
00:21:43,110 --> 00:21:44,530
is a library that covers more.

410
00:21:46,720 --> 00:21:48,380
Then on the SPI side, SPI

411
00:21:48,380 --> 00:21:50,360
There may be fewer interfaces

412
00:21:50,360 --> 00:21:52,080
A little, the iPhone SE is a little less,

413
00:21:52,200 --> 00:21:53,700
But its kinetic energy may be greater than that of the iPhone

414
00:21:53,700 --> 00:21:54,700
SE is a bit more.

415
00:21:55,080 --> 00:21:56,740
iPhone SE needs to be operated

416
00:21:56,740 --> 00:22:01,060
Address, SPI does not need, SPI

417
00:22:01,060 --> 00:22:04,380
If so, it can actually be used directly

418
00:22:04,380 --> 00:22:09,180
CS is disabled, the corresponding SP

419
00:22:09,180 --> 00:22:12,060
I equipment to operate.

420
00:22:13,600 --> 00:22:14,800
Then this example is simple

421
00:22:14,800 --> 00:22:17,440
A transfer, also on MacOS

422
00:22:17,440 --> 00:22:18,640
Inside the phone.

423
00:22:19,140 --> 00:22:22,580
Then what we are going to use is TFTP

424
00:22:22,580 --> 00:22:25,040
examples, and then mainly use

425
00:22:25,040 --> 00:22:28,460
The library is TFTP ESPI, and then

426
00:22:28,460 --> 00:22:30,080
You can see more complexity on the boundary

427
00:22:30,080 --> 00:22:34,880
A bit more complicated, except for normal electricity

428
00:22:34,880 --> 00:22:39,040
source, then CS, CS DC, CS is done

429
00:22:39,040 --> 00:22:41,220
Film Selection, then DC is Invention,

430
00:22:41,820 --> 00:22:45,140
Then it also includes Reset and backlight,

431
00:22:45,220 --> 00:22:46,700
This backlight is actually optional.

432
00:22:47,420 --> 00:22:49,300
Then the two main data

433
00:22:49,300 --> 00:22:54,820
Transmission line, one is CR

434
00:22:54,820 --> 00:22:58,820
K's, one is MOSI,

435
00:23:00,060 --> 00:23:03,100
Then in the TFTP ESPI library

436
00:23:03,100 --> 00:23:04,220
face, we should also do the corresponding

437
00:23:04,220 --> 00:23:08,780
Adaptation, this is a common adaptation

438
00:23:08,780 --> 00:23:11,120
Matching, no matter it is as long as there is new

439
00:23:11,120 --> 00:23:13,700
The screen is added, all to be simplified

440
00:23:13,700 --> 00:23:15,060
Single adaptation, one is to modify

441
00:23:15,060 --> 00:23:18,000
Its Rooster Set file,

442
00:23:18,560 --> 00:23:19,960
Then adapt the driver, then adapt

443
00:23:19,960 --> 00:23:25,620
corresponding pins, and then some

444
00:23:25,620 --> 00:23:29,200
the character library to be used, and then

445
00:23:29,200 --> 00:23:31,220
When compiling, we will also have

446
00:23:31,220 --> 00:23:36,120
Some questions, this is for various types of

447
00:23:36,120 --> 00:23:38,900
Adaptation of numbers without adding SDR

448
00:23:38,900 --> 00:23:47,100
If M is plugged in and then TFTP, it is possible

449
00:23:47,100 --> 00:23:50,480
There will be more interesting

450
00:23:50,480 --> 00:23:56,500
Example, for example, our normal

451
00:23:56,500 --> 00:23:59,980
Professional use examples, TFTP

452
00:23:59,980 --> 00:24:03,740
Choose any of these

453
00:24:03,740 --> 00:24:14,880
Examples, such as space and time, this

454
00:24:14,880 --> 00:24:35,310
The original screen is TFTP, OK

455
00:24:35,310 --> 00:24:39,310
See official screen examples,

456
00:24:39,410 --> 00:24:42,570
It is basically ready to run. Of course, its

457
00:24:42,570 --> 00:24:52,140
His includes other examples, which are actually

458
00:24:52,140 --> 00:24:54,420
It can be run, just make simple

459
00:24:54,420 --> 00:24:56,940
A simple adaptation is enough, currently only

460
00:24:56,940 --> 00:24:58,960
Need to do some repairs and compilation

461
00:24:58,960 --> 00:25:00,820
Just adapt, of course there are

462
00:25:00,820 --> 00:25:04,560
A question, TFT ESPI actually

463
00:25:04,560 --> 00:25:06,340
Yes, there are advantages for each version

464
00:25:06,340 --> 00:25:08,460
, currently we use the simplest

465
00:25:08,460 --> 00:25:11,260
Simple, unoptimized connection

466
00:25:11,260 --> 00:25:15,540
mouth, so this might be a test,

467
00:25:17,460 --> 00:25:19,700
This may be faster in terms of speed

468
00:25:19,700 --> 00:25:27,240
Slower, of course on TFT ESPI

469
00:25:27,240 --> 00:25:29,940
On this basis, we can actually

470
00:25:29,940 --> 00:25:33,620
to run more complex

471
00:25:33,620 --> 00:25:40,160
Library, such as LVGL

472
00:25:40,160 --> 00:25:44,720
Example, this is actually directly from the library

473
00:25:44,720 --> 00:25:54,040
Obtain LVGL, it is already installed here

474
00:25:54,040 --> 00:25:56,360
It’s installed, of course I haven’t updated it yet

475
00:25:56,360 --> 00:25:56,980
Because 9.

476
00:25:57,100 --> 00:25:59,900
0 has relatively major changes,

477
00:26:00,020 --> 00:26:00,840
I still use 8 now.

478
00:26:00,960 --> 00:26:15,780
Version 3, this

479
00:26:15,780 --> 00:26:19,840
The compilation time may be very long. Compile

480
00:26:19,840 --> 00:26:23,700
It's very long, let's go back to that first,

481
00:26:24,700 --> 00:26:28,640
For SPI, TFT ES

482
00:26:28,640 --> 00:26:31,240
PI is a commonly used library, this is what we

483
00:26:31,240 --> 00:26:32,780
I hope to do more in the future

484
00:26:32,780 --> 00:26:36,980
Optimization, and because we use L

485
00:26:36,980 --> 00:26:40,420
VGL, or some other

486
00:26:40,420 --> 00:26:41,839
For larger libraries, there will be

487
00:26:41,839 --> 00:26:45,619
There is insufficient memory,

488
00:26:45,780 --> 00:26:47,220
How to adjust the memory, that is

489
00:26:47,220 --> 00:26:49,660
What I just said was with Da He

490
00:26:49,660 --> 00:26:51,140
to share memory, so as long as

491
00:26:51,140 --> 00:26:53,680
To modify the content of RTOS

492
00:26:53,680 --> 00:26:56,740
Save, whether it is transferred to the schedule, of course

493
00:26:56,740 --> 00:26:59,220
I didn't adjust it very high, I adjusted it to less than

494
00:26:59,220 --> 00:27:02,280
A larger value is currently acceptable.

495
00:27:03,600 --> 00:27:05,140
Then adjust the mirror, just adjust

496
00:27:05,140 --> 00:27:08,220
Adjust the inside of the mirror and it will be M

497
00:27:08,220 --> 00:27:12,380
The value of EMAP, and the adjustment

498
00:27:12,380 --> 00:27:14,680
Reorganize the source code, the source code

499
00:27:14,680 --> 00:27:18,120
Link files inside, links

500
00:27:18,120 --> 00:27:20,180
The starting address of the file and

501
00:27:20,180 --> 00:27:23,940
The length of the end, so that's it,

502
00:27:24,020 --> 00:27:25,280
Just generate a new image

503
00:27:25,280 --> 00:27:27,420
Runs in large memory.

504
00:27:29,120 --> 00:27:43,500
We can take a look at this

505
00:27:45,960 --> 00:27:51,760
Compilation is very, as you can see, compilation

506
00:27:51,760 --> 00:27:53,160
There are so many things, no

507
00:27:53,160 --> 00:28:01,940
There is only a library, but there are also some, no

508
00:28:05,820 --> 00:28:11,440
How do you know? This is the most basic one

509
00:28:11,440 --> 00:28:16,840
display and then include its comparison

510
00:28:16,840 --> 00:28:22,180
All common examples can be compiled.

511
00:28:22,180 --> 00:28:22,820
and run.

512
00:28:25,440 --> 00:28:28,080
This is because we are based on TFT

513
00:28:28,080 --> 00:28:30,320
ESPI library, and now Trans

514
00:28:30,320 --> 00:28:33,120
form, that library did not do very in-depth

515
00:28:33,120 --> 00:28:35,780
optimization, so the performance is still

516
00:28:35,780 --> 00:28:39,560
More limited, then like this

517
00:28:39,560 --> 00:28:42,980
Music’s final FPS, probably

518
00:28:42,980 --> 00:28:45,500
It's in the thirties, of course in the big core

519
00:28:45,500 --> 00:28:47,580
It may reach more than a hundred,

520
00:28:54,000 --> 00:28:54,880
Don't wait for this.

521
00:28:59,160 --> 00:29:04,260
Then, in the future, we hope

522
00:29:04,260 --> 00:29:05,780
There are more actual

523
00:29:05,780 --> 00:29:07,580
Contributor, or player

524
00:29:07,580 --> 00:29:11,240
Participate in our Arduino development

525
00:29:11,240 --> 00:29:13,340
China will do more liberalization,

526
00:29:13,660 --> 00:29:15,960
Adapt to more boards, just

527
00:29:15,960 --> 00:29:17,960
Put forward more demands, suitable for

528
00:29:17,960 --> 00:29:21,380
With more environments, then we

529
00:29:21,380 --> 00:29:22,860
Also for some SATA interfaces

530
00:29:22,860 --> 00:29:25,520
Adapt, including on the road

531
00:29:25,520 --> 00:29:29,340
Camera, including other SDR

532
00:29:29,340 --> 00:29:31,340
Some interfaces to the class, if needed.

533
00:29:33,810 --> 00:29:37,250
Then there is another thing: just announced

534
00:29:37,250 --> 00:29:39,310
The formaldehyde plan was announced.

535
00:29:39,310 --> 00:29:40,750
Yatech officially joins formaldehyde

536
00:29:40,750 --> 00:29:41,090
plan.

537
00:29:42,870 --> 00:29:44,670
Today I introduce the road settings

538
00:29:44,670 --> 00:29:44,790
count.

539
00:29:51,830 --> 00:29:54,310
Thank you very much Junqiang for sharing.

540
00:29:55,590 --> 00:29:58,170
If you have any questions, you are welcome

541
00:29:58,170 --> 00:29:59,710
in the chat window, or in

542
00:29:59,710 --> 00:30:00,910
Bilibili’s barrage progress

543
00:30:00,910 --> 00:30:02,110
Let’s discuss.

544
00:30:02,350 --> 00:30:03,870
In addition we also see the chat window

545
00:30:03,870 --> 00:30:06,630
Among them, everyone is already doing a hot

546
00:30:06,630 --> 00:30:08,390
Strong discussion, Junqiang can take a look

547
00:30:08,390 --> 00:30:10,650
Chat window, see what are there

548
00:30:10,650 --> 00:30:13,210
It can be answered directly, we can

549
00:30:13,210 --> 00:30:14,330
by voice

550
00:30:14,330 --> 00:30:15,750
communication, or through subsequent

551
00:30:15,750 --> 00:30:17,370
Text, in the chat window

552
00:30:17,370 --> 00:30:18,050
Make a reply.

553
00:30:21,330 --> 00:30:24,110
In addition, we have a dedicated editor,

554
00:30:24,290 --> 00:30:26,030
Responsible for putting Bilibili on

555
00:30:26,030 --> 00:30:28,190
Comments and questions are also forwarded to

556
00:30:28,190 --> 00:30:28,690
Come this way.

557
00:30:30,030 --> 00:30:32,430
Then my answer from the beginning

558
00:30:32,430 --> 00:30:34,630
Well, even Yin Jiao Ming has something, this

559
00:30:34,630 --> 00:30:39,810
Part of it is actually over there, over here

560
00:30:39,810 --> 00:30:43,770
In fact, there are all of them, and the Pin ones are directly objects.

561
00:30:43,770 --> 00:30:46,210
Sort it out, and then just use it

562
00:30:46,210 --> 00:30:47,750
In fact, all procedures can be carried out

563
00:30:47,750 --> 00:30:48,130
operate.

564
00:30:49,410 --> 00:30:51,370
Then between size and, some

565
00:30:51,370 --> 00:30:53,550
In the source code documentation

566
00:30:53,550 --> 00:30:57,290
Yes, but currently the size and sum of

567
00:30:57,290 --> 00:30:58,930
message, is based on the original implementation

568
00:30:58,930 --> 00:31:02,870
, size and communication method

569
00:31:02,870 --> 00:31:05,730
Formula, use C, 7D, Q squares

570
00:31:05,730 --> 00:31:08,410
formula, and then this may be behind us, maybe

571
00:31:08,410 --> 00:31:10,530
Will be changed to Mirrorbox

572
00:31:10,530 --> 00:31:14,670
way, and then currently based on the original

573
00:31:14,670 --> 00:31:16,210
That way can be continued

574
00:31:16,210 --> 00:31:26,130
Communications, then currently via US

575
00:31:26,130 --> 00:31:32,180
B simulates window burning, and its

576
00:31:32,180 --> 00:31:41,100
There seems to be nothing wrong with him, and the other one,

577
00:31:42,000 --> 00:31:43,680
For example, are there any problems with Station B?

578
00:31:48,850 --> 00:31:51,350
Okay, the transcript of our speech

579
00:31:51,350 --> 00:31:52,750
Like, it will be uploaded to

580
00:31:52,750 --> 00:31:54,530
Bilibili, and if you have any questions,

581
00:31:54,530 --> 00:31:56,250
You are also welcome to watch the recording later

582
00:31:56,250 --> 00:31:58,230
When it looks like it, through the comments on station B

583
00:31:58,230 --> 00:32:01,070
Leave a message and ask questions in the discussion area, we

584
00:32:01,070 --> 00:32:02,930
These will be updated regularly

585
00:32:02,930 --> 00:32:04,230
Questions, passed to the speaker.
