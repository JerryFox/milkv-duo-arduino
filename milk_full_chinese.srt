1
00:00:00,650 --> 00:00:02,630
大家好,我是来自普洱科技

2
00:00:02,630 --> 00:00:05,290
的王俊强,然后今天就由

3
00:00:05,290 --> 00:00:06,950
我来给大家介绍Arduino

4
00:00:08,170 --> 00:00:11,750
RG200X上的各

5
00:00:11,750 --> 00:00:12,770
种玩法。

6
00:00:14,350 --> 00:00:17,790
那这个是现在可以访问到

7
00:00:17,790 --> 00:00:20,890
的各个链接,然后第一个

8
00:00:20,890 --> 00:00:23,370
是那个面对威胁的关

9
00:00:23,370 --> 00:00:25,350
于快速使用Arduino的

10
00:00:25,350 --> 00:00:29,030
手册,第二个是那个需要更

11
00:00:29,030 --> 00:00:30,950
新的镜像,然后我们现在主

12
00:00:30,950 --> 00:00:33,530
要在那个makeway做上进

13
00:00:33,530 --> 00:00:38,410
行测试,然后第三个是那个

14
00:00:38,410 --> 00:00:41,490
可以获取的源码,第四

15
00:00:41,490 --> 00:00:44,090
个就是一些Arduino的语法

16
00:00:44,090 --> 00:00:46,650
或者是编程的一些规范,

17
00:00:47,690 --> 00:00:49,470
然后本次介绍主要会

18
00:00:49,470 --> 00:00:52,770
介绍Arduino和RG20

19
00:00:52,770 --> 00:00:56,050
0X上的各种实现

20
00:00:56,050 --> 00:00:58,550
和以及快速上手,然后以及

21
00:00:58,550 --> 00:01:00,130
视力的一些演示。

22
00:01:02,110 --> 00:01:05,110
然后Arduino是一个就是很受

23
00:01:05,110 --> 00:01:06,790
欢迎,便利灵活的一个

24
00:01:06,790 --> 00:01:09,110
开源电子原型平台,

25
00:01:10,390 --> 00:01:12,410
它主要包含两方面,一

26
00:01:12,410 --> 00:01:14,810
方面是硬件,就是各种Ar

27
00:01:14,810 --> 00:01:16,690
duino的板子,像这个图里

28
00:01:16,690 --> 00:01:19,810
面的是一个非常经典的Ar

29
00:01:19,810 --> 00:01:22,310
duino的开发板,但随着

30
00:01:22,310 --> 00:01:25,430
那个大家使用Arduino的广

31
00:01:25,430 --> 00:01:28,810
泛性,然后nano系列的

32
00:01:28,810 --> 00:01:31,250
那些板子现在是越来

33
00:01:31,250 --> 00:01:33,530
越多了,比较具有代

34
00:01:33,530 --> 00:01:35,430
表性的就是ESP32或者

35
00:01:35,430 --> 00:01:37,910
是那个树莓派的RP20

36
00:01:37,910 --> 00:01:41,750
40这样的板型,包括我们要

37
00:01:41,750 --> 00:01:43,350
用的那个DAW也属于

38
00:01:43,350 --> 00:01:45,450
这种板型,然后Arduino还有

39
00:01:45,450 --> 00:01:47,010
相应的软件,就是Arduino

40
00:01:47,010 --> 00:01:50,830
的IEE,而这个IEE大

41
00:01:50,830 --> 00:01:53,330
大缩减了开发人员

42
00:01:53,330 --> 00:01:55,970
的,就是非专业开发人

43
00:01:55,970 --> 00:01:58,190
员的使用,因为它这里面

44
00:01:58,190 --> 00:02:00,490
关于开发板或者关于

45
00:02:00,490 --> 00:02:02,450
库,它其实都是可以直接去下

46
00:02:02,450 --> 00:02:05,430
载,大大方便了非专

47
00:02:05,430 --> 00:02:07,410
业人员的使用,所以在

48
00:02:07,410 --> 00:02:10,270
就是各种艺术创作或者

49
00:02:10,270 --> 00:02:13,390
是业余的业余的代

50
00:02:13,390 --> 00:02:14,910
码号者中,Arduino是非常

51
00:02:14,910 --> 00:02:18,890
受欢迎的,包括像清华

52
00:02:18,890 --> 00:02:20,630
美院也有用Arduino做

53
00:02:20,630 --> 00:02:25,590
的一些艺术展示,然后刚

54
00:02:25,590 --> 00:02:27,250
才说了Arduino的语言,

55
00:02:27,310 --> 00:02:28,350
Arduino的语言为了方

56
00:02:28,350 --> 00:02:30,310
便使用,它其实做了一些

57
00:02:30,310 --> 00:02:33,570
分装,然后内壁上其实不是

58
00:02:33,570 --> 00:02:36,770
很多,就比较包括那个数字

59
00:02:36,770 --> 00:02:38,410
IO和模拟IO的输入

60
00:02:38,410 --> 00:02:40,670
输出,然后包括那个PWM

61
00:02:40,670 --> 00:02:42,870
或者是包括一些综战和开

62
00:02:42,870 --> 00:02:45,510
码,但这些其实都是面向

63
00:02:45,510 --> 00:02:49,050
普通用户,其实都是就不用

64
00:02:49,050 --> 00:02:50,330
关心底层机制,只要

65
00:02:50,330 --> 00:02:52,650
是用上层的上层的

66
00:02:52,650 --> 00:02:54,710
接口就可以了,然后它也有

67
00:02:54,710 --> 00:02:56,690
自己的一些结构体,包括最

68
00:02:56,690 --> 00:02:59,550
那个最典型的就是loop和

69
00:02:59,550 --> 00:03:01,530
setup,这两个是Arduino

70
00:03:01,530 --> 00:03:05,090
的就是设置和循环程

71
00:03:05,090 --> 00:03:08,050
序,可以说是Arduino的工作

72
00:03:08,050 --> 00:03:10,750
的一个核心,然后更多的

73
00:03:10,750 --> 00:03:12,970
资料可以去官网去查

74
00:03:12,970 --> 00:03:16,010
看,各种语法和使用

75
00:03:16,010 --> 00:03:21,570
的实例,然后刚才魏也

76
00:03:21,570 --> 00:03:23,970
介绍了SGA200X上

77
00:03:23,970 --> 00:03:29,210
的配置,然后我们的Arduino

78
00:03:29,210 --> 00:03:33,370
其实主要是运行在它的

79
00:03:33,370 --> 00:03:37,730
一个700兆的小盒上,不管

80
00:03:37,730 --> 00:03:39,590
大盒是用Linux还是

81
00:03:39,590 --> 00:03:43,110
用ARM,其实都是可以支持Ar

82
00:03:43,110 --> 00:03:51,360
duino的,然后我们主要的实

83
00:03:51,360 --> 00:03:52,840
现对象是Makeway

84
00:03:52,840 --> 00:03:56,280
的Dock,我们可以看一下它的那个

85
00:03:56,280 --> 00:03:59,980
提供的一些资源,它有

86
00:03:59,980 --> 00:04:02,260
40个pin,提供了丰富

87
00:04:02,260 --> 00:04:04,660
的外设资源,包括26个

88
00:04:04,660 --> 00:04:07,140
的GPIO,包括Transl

89
00:04:07,140 --> 00:04:09,340
ate,IPhone C,ADC,SPI

90
00:04:09,340 --> 00:04:14,460
这些常用的接口,我们

91
00:04:14,460 --> 00:04:18,240
下面会用这些进行实

92
00:04:18,240 --> 00:04:26,200
验,目前Arduino在SGA200

93
00:04:26,200 --> 00:04:30,260
X上,已经实现了对Ar

94
00:04:30,260 --> 00:04:31,320
duino通用语言API的

95
00:04:31,320 --> 00:04:34,820
一些封装和使用,已经基本

96
00:04:34,820 --> 00:04:37,220
上覆盖了所有的API,

97
00:04:37,620 --> 00:04:40,560
除了没有支持USB,USB

98
00:04:40,560 --> 00:04:42,600
主要是键盘和鼠标,

99
00:04:44,760 --> 00:04:48,560
在这个板子上我们暂时

100
00:04:48,560 --> 00:04:50,860
没有去试用它,然后对设

101
00:04:50,860 --> 00:04:52,840
备的支持主要是GP

102
00:04:52,840 --> 00:04:55,200
IO,IC,串口,SPI之类,

103
00:04:55,500 --> 00:04:58,760
都是一些常用并且非常非常

104
00:04:58,760 --> 00:05:01,340
方便操作的设备,然后

105
00:05:01,340 --> 00:05:03,100
内部的Camera和终端我们

106
00:05:03,100 --> 00:05:06,740
其实都做了一些适配,对

107
00:05:06,740 --> 00:05:08,560
于用户来说的话只是普

108
00:05:08,560 --> 00:05:10,860
通的一些,Camera可以用到普

109
00:05:10,860 --> 00:05:12,580
通的Delay函数,其他

110
00:05:12,580 --> 00:05:14,040
可能就是一些内部的接口,

111
00:05:15,120 --> 00:05:19,300
然后在板型上我们目前主

112
00:05:19,300 --> 00:05:21,040
要是支持DOR系列,包括

113
00:05:21,040 --> 00:05:23,240
DOR64和DOR256,

114
00:05:23,580 --> 00:05:24,920
DOROS也在进行中,

115
00:05:25,840 --> 00:05:27,560
然后以后会有更多的

116
00:05:27,560 --> 00:05:34,180
板型,关于Arduino在SD

117
00:05:34,180 --> 00:05:39,580
200X上的实现,因为其实

118
00:05:39,580 --> 00:05:43,480
从这个主要流程上来

119
00:05:43,480 --> 00:05:47,420
看,Arduino在SD200X上

120
00:05:47,420 --> 00:05:50,840
实现是和其他的,比如像

121
00:05:50,840 --> 00:05:52,440
ESP32或者是其他板

122
00:05:52,440 --> 00:05:54,540
子是不一样的,因为它的

123
00:05:54,540 --> 00:05:56,680
大核一直是处于运行

124
00:05:56,680 --> 00:05:58,280
过程中,而我们只是跑在

125
00:05:58,280 --> 00:06:00,400
小核过程中,其他的不管

126
00:06:00,400 --> 00:06:02,420
是单核还是双核的,它

127
00:06:02,420 --> 00:06:05,760
其实每次都是重新烧写,

128
00:06:05,960 --> 00:06:08,980
然后重新启动,然后我们的

129
00:06:08,980 --> 00:06:11,860
实现流程上是保持

130
00:06:11,860 --> 00:06:14,080
大核持续的运行,然后

131
00:06:14,080 --> 00:06:15,440
在小核上不断的可以

132
00:06:15,440 --> 00:06:20,080
去切换各种程序,我们

133
00:06:20,080 --> 00:06:21,680
主要的流程上就是获

134
00:06:21,680 --> 00:06:26,180
取Arduino的支持,然后这个基本

135
00:06:26,180 --> 00:06:27,440
上通过HTTP协议

136
00:06:27,440 --> 00:06:30,080
从网络上下载,就是开

137
00:06:30,080 --> 00:06:33,040
到我们说的网址,然后更

138
00:06:33,040 --> 00:06:36,180
新到Arduino IDE里面,Ar

139
00:06:36,180 --> 00:06:38,880
duino IDE可以去编辑各种

140
00:06:38,880 --> 00:06:43,060
IOM,就是Arduino的APP,呈

141
00:06:43,060 --> 00:06:45,040
ERF文件,然后通过烧

142
00:06:45,040 --> 00:06:50,300
写工具去烧写到具

143
00:06:50,300 --> 00:06:53,300
体的设备上,烧写工

144
00:06:53,300 --> 00:06:55,940
具使用的是窗口协议,

145
00:06:56,080 --> 00:06:57,900
但是这个窗口是USB转

146
00:06:57,900 --> 00:07:00,500
过来的虚拟窗口,然后

147
00:07:00,500 --> 00:07:04,660
在大核上我们是用一个

148
00:07:04,660 --> 00:07:07,160
烧写服务来进行通

149
00:07:07,160 --> 00:07:10,020
信,烧写服务负责去

150
00:07:10,020 --> 00:07:13,820
保存和更新Arduino的

151
00:07:13,820 --> 00:07:18,240
固件,然后通过NuxN

152
00:07:18,240 --> 00:07:19,860
ex的机制把它启动在

153
00:07:19,860 --> 00:07:22,600
小核上,然后这里面就是我们

154
00:07:22,600 --> 00:07:24,860
和其他实现上有一个

155
00:07:24,860 --> 00:07:26,840
不一样的地方,就是说其

156
00:07:26,840 --> 00:07:30,120
他的ROM是固定的,然后

157
00:07:30,120 --> 00:07:31,940
我们实现的ROM其实是

158
00:07:31,940 --> 00:07:33,920
一个可变的ROM,就是根

159
00:07:33,920 --> 00:07:36,380
据需要可以自由的去调整

160
00:07:36,380 --> 00:07:39,920
ROM的大小,比如说有

161
00:07:39,920 --> 00:07:43,140
些库,像U8GR的库

162
00:07:43,140 --> 00:07:45,640
比较大,有些中文字

163
00:07:45,640 --> 00:07:47,160
符号的库都是比较大的,

164
00:07:47,160 --> 00:07:48,900
我们不需要做开箱,直接可以

165
00:07:48,900 --> 00:07:51,900
把它给你运行,这里面我们

166
00:07:51,900 --> 00:07:54,220
的Arduino运行的空间

167
00:07:54,220 --> 00:07:56,220
和VirtuoS是重合

168
00:07:56,220 --> 00:07:58,700
的,所以VirtuoS和Ar

169
00:07:58,700 --> 00:08:01,540
duino只能存在一个,默认

170
00:08:01,540 --> 00:08:05,780
情况下,DOOR是从83F

171
00:08:05,780 --> 00:08:07,860
4开始的,而256是从

172
00:08:07,860 --> 00:08:12,220
8FE开始的,那256上

173
00:08:12,220 --> 00:08:13,820
可能会有两招的空间

174
00:08:13,820 --> 00:08:15,760
给Arduino运行,然后DOOR

175
00:08:15,760 --> 00:08:19,520
上可能是七十几K吧,

176
00:08:22,100 --> 00:08:26,720
七百几K,当然这个空间

177
00:08:26,720 --> 00:08:29,180
可以根据镜像里面的

178
00:08:29,180 --> 00:08:34,309
配置自由调节,然后刚才

179
00:08:34,309 --> 00:08:35,850
说的烧写程序,烧写

180
00:08:35,850 --> 00:08:40,950
程序当然也和其他的烧

181
00:08:40,950 --> 00:08:43,130
写不一样,一般的烧

182
00:08:43,130 --> 00:08:46,690
写都是在ROM里,或者是

183
00:08:46,690 --> 00:08:49,370
有一个不得了点的程

184
00:08:49,370 --> 00:08:52,070
序负责烧写,但因为我们

185
00:08:52,070 --> 00:08:53,330
现在是通过Docker去

186
00:08:53,330 --> 00:08:55,310
调控,所以就是烧写程序

187
00:08:55,310 --> 00:08:57,350
可以简化成一个烧写的

188
00:08:57,350 --> 00:08:59,290
服务,烧写程序主要

189
00:08:59,290 --> 00:09:00,870
负责串口监听,然后尽

190
00:09:00,870 --> 00:09:01,990
量更新,还有一些小核

191
00:09:01,990 --> 00:09:07,590
控制,Docker去更新

192
00:09:07,590 --> 00:09:09,510
程序,然后停止小核上

193
00:09:09,510 --> 00:09:11,190
Arduino运行,然后更新Ar

194
00:09:11,190 --> 00:09:13,090
duino,并且启动新的Ar

195
00:09:13,090 --> 00:09:16,470
duino去运行,这个过程是

196
00:09:16,470 --> 00:09:18,010
在大核运行过程中

197
00:09:18,010 --> 00:09:19,950
可以不断的去更换,更

198
00:09:19,950 --> 00:09:22,030
换我们运行的Arduino。

199
00:09:27,000 --> 00:09:29,260
从源码上来讲,我们源

200
00:09:29,260 --> 00:09:32,700
码是开源的,可以看到类

201
00:09:32,700 --> 00:09:33,860
似的目录结构,然后这

202
00:09:33,860 --> 00:09:35,860
些目录结构里面Ad

203
00:09:35,860 --> 00:09:37,380
reno的痕迹分双都是在

204
00:09:37,380 --> 00:09:39,540
SGR的名册里面,然后

205
00:09:39,540 --> 00:09:42,720
相关的文档实现和

206
00:09:42,720 --> 00:09:45,760
一些事例都在BLC的

207
00:09:45,760 --> 00:09:49,540
目录里面,然后目前的扩

208
00:09:49,540 --> 00:09:51,300
展库里面我们只支持了

209
00:09:51,300 --> 00:09:57,340
SPI和FMC的库,但是

210
00:09:57,340 --> 00:10:00,180
更多的库其实我们都在

211
00:10:00,180 --> 00:10:03,380
修改中,然后这个就需要大家

212
00:10:03,380 --> 00:10:05,880
的积极参与,然后具体

213
00:10:05,880 --> 00:10:07,420
用到哪些库或者是哪

214
00:10:07,420 --> 00:10:08,760
些库比较受欢迎都

215
00:10:08,760 --> 00:10:10,380
可以来贡献提交。

216
00:10:12,080 --> 00:10:16,500
然后其他的工具目录就是

217
00:10:16,500 --> 00:10:19,040
放一些烧写工具,然后和

218
00:10:19,040 --> 00:10:21,920
一些使用的打包用的

219
00:10:21,920 --> 00:10:24,980
一些脚本,然后包括版型配

220
00:10:24,980 --> 00:10:28,000
置都是在这个下面的一个目

221
00:10:28,000 --> 00:10:31,420
录,然后IDE的版级配置

222
00:10:31,420 --> 00:10:34,660
说明或者是如何去配置

223
00:10:34,660 --> 00:10:36,520
烧写工具都是在这些

224
00:10:36,520 --> 00:10:39,300
TST里面,这些其实如果

225
00:10:39,300 --> 00:10:42,340
要新增新的版子,其实

226
00:10:42,340 --> 00:10:43,620
只要修改这两个目

227
00:10:43,620 --> 00:10:45,440
录,然后和添加相关的

228
00:10:45,440 --> 00:10:47,480
配置就可以了,然后主要构

229
00:10:47,480 --> 00:10:50,440
建过程其实和常用的

230
00:10:50,440 --> 00:10:52,220
Arduino的程序都是一样

231
00:10:52,220 --> 00:10:56,520
的,就是检测库,然后生产

232
00:10:56,520 --> 00:10:58,060
汉字元型,编译项目,

233
00:10:58,140 --> 00:10:59,740
编辑库,编译内核,然后

234
00:10:59,740 --> 00:11:01,280
最后打包成一个ERF,

235
00:11:05,380 --> 00:11:08,100
然后如何快速上手,如何快

236
00:11:08,100 --> 00:11:12,020
速上手的话,其实是和其

237
00:11:12,020 --> 00:11:15,720
他的Arduino版子是一样

238
00:11:15,720 --> 00:11:18,260
的,但我们需要先更新一下

239
00:11:18,260 --> 00:11:20,760
镜像,然后去安装IDE,然后

240
00:11:20,760 --> 00:11:22,960
去下载相关的JSON

241
00:11:22,960 --> 00:11:25,280
放到那个目录里面,这个

242
00:11:25,280 --> 00:11:28,200
其实可以去参考那个Maker

243
00:11:28,200 --> 00:11:30,100
Bay写的这个引导文档,

244
00:11:32,100 --> 00:11:35,220
我们也可以看一下这个引导文档,

245
00:11:41,020 --> 00:11:43,380
这里面其实有比较详细

246
00:11:43,380 --> 00:11:47,580
的步骤,我那个可能又比

247
00:11:47,580 --> 00:11:49,420
较简化,这里就是关于下

248
00:11:49,420 --> 00:11:52,600
载那个JSON在哪边填

249
00:11:52,600 --> 00:11:55,580
入,包括去安装开发板

250
00:11:55,580 --> 00:12:02,440
的版型,然后去选择,在

251
00:12:02,440 --> 00:12:03,760
这里选择我们要刷写的

252
00:12:03,760 --> 00:12:06,620
开发板,我们这边可以选

253
00:12:06,620 --> 00:12:08,580
Dock,可以选R56,DOS

254
00:12:08,580 --> 00:12:11,480
也在支持中,然后就可以进行

255
00:12:11,480 --> 00:12:22,140
烧写,下面

256
00:12:22,140 --> 00:12:26,820
我们就可以去演示一下相关

257
00:12:26,820 --> 00:12:30,280
的接口,主要会覆盖

258
00:12:30,280 --> 00:12:32,460
GPIO,PWM,IPOC,

259
00:12:32,960 --> 00:12:37,180
SPI,还有这些已经可以看到

260
00:12:37,180 --> 00:12:40,640
的所有的接口,GPIO

261
00:12:40,640 --> 00:12:45,940
其实是非常简单的一个程

262
00:12:45,940 --> 00:12:49,860
序,GPIO它其实就是,可以

263
00:12:49,860 --> 00:12:51,620
看到它的结果是非常简单

264
00:12:51,620 --> 00:12:53,740
的,只有三个结果,Pin

265
00:12:53,740 --> 00:12:56,920
Model去设置具体P

266
00:12:56,920 --> 00:12:58,940
in的模式,RTU运

267
00:12:58,940 --> 00:13:00,640
动中模式其实有两种,

268
00:13:00,760 --> 00:13:02,240
一种是输入,一种是

269
00:13:02,240 --> 00:13:04,720
输出,上拉下拉其实也

270
00:13:04,720 --> 00:13:06,700
有相应的设置方式,

271
00:13:09,500 --> 00:13:11,120
还有两个接口,后面就是

272
00:13:11,120 --> 00:13:12,380
读这个Pin和写这个P

273
00:13:12,380 --> 00:13:14,580
in的值,Pin的值只有

274
00:13:14,580 --> 00:13:15,620
两种,一种是高一种

275
00:13:15,620 --> 00:13:20,640
是低,像默认程序里

276
00:13:20,640 --> 00:13:23,000
面的Blink就非常简单,

277
00:13:23,120 --> 00:13:24,720
在Stub中去设置模

278
00:13:24,720 --> 00:13:29,900
式,在循环中去写入

279
00:13:29,900 --> 00:13:32,380
高电瓶,然后写入低电

280
00:13:32,380 --> 00:13:35,540
瓶,这样就可以形成闪烁的

281
00:13:35,540 --> 00:13:35,880
效果。

282
00:13:55,070 --> 00:13:59,470
这里我其实可以看到,我使用

283
00:13:59,470 --> 00:14:04,490
的是自定义的引脚,因为

284
00:14:04,490 --> 00:14:07,690
这可能接线比较长短,

285
00:14:14,620 --> 00:14:17,620
这里的Pin值,就是引脚

286
00:14:17,620 --> 00:14:20,680
的值,是物理引脚的

287
00:14:20,680 --> 00:14:22,980
值,不是物理引脚的12

288
00:14:22,980 --> 00:14:25,460
345678,它不是GP

289
00:14:25,460 --> 00:14:27,340
IO的值,因为GPIO的

290
00:14:27,340 --> 00:14:29,020
值其实是比较混乱的,

291
00:14:29,340 --> 00:14:31,720
我们选物理引脚比较

292
00:14:31,720 --> 00:14:33,220
便利和快速的使用,

293
00:14:33,580 --> 00:14:35,440
因为Arduino和其他的不一

294
00:14:35,440 --> 00:14:39,120
样,它对上层的分轮

295
00:14:39,120 --> 00:14:41,000
号映射,其实是我们在内

296
00:14:41,000 --> 00:14:43,500
部已经做好了,不用去做转

297
00:14:43,500 --> 00:14:45,500
换,其他不需要去转换,

298
00:14:46,420 --> 00:14:48,380
Arduino因为是直接使用,我们

299
00:14:48,380 --> 00:14:49,940
就选择了物理引脚,

300
00:14:50,100 --> 00:14:51,900
这样可能比较方便一点。

301
00:14:55,060 --> 00:14:59,500
这个是最简单的演示

302
00:14:59,500 --> 00:15:03,220
程序,直接就是去烧写,烧

303
00:15:03,220 --> 00:15:04,540
写过程可以变异运行,

304
00:15:04,900 --> 00:15:11,010
变异然后再去烧写,可以

305
00:15:11,010 --> 00:15:15,650
看到这个已经是传到板子

306
00:15:15,650 --> 00:15:17,510
上面运行起来,而在这个

307
00:15:17,510 --> 00:15:24,170
时候,板子上还是在运行

308
00:15:24,170 --> 00:15:28,430
的,大核没有停止,小核

309
00:15:28,430 --> 00:15:31,670
可以自由再去切换程序,

310
00:15:35,850 --> 00:15:49,660
我们去修改它一下,然后就可以

311
00:15:49,660 --> 00:15:53,140
完成GPIO的使用。

312
00:15:54,460 --> 00:15:59,940
除了GPIO外,PW

313
00:15:59,940 --> 00:16:03,380
M是经常用的一个接

314
00:16:03,380 --> 00:16:04,880
口,PWM我们一般是

315
00:16:04,880 --> 00:16:08,440
用电机去操作,然后这里

316
00:16:08,440 --> 00:16:10,020
对应的接口就是模拟

317
00:16:10,020 --> 00:16:13,880
量的输出,那边我们加入

318
00:16:13,880 --> 00:16:18,200
了tranq的接口,我们

319
00:16:18,200 --> 00:16:19,680
正好是测试一下tran

320
00:16:19,680 --> 00:16:22,740
q的阻斜,然后程序也

321
00:16:22,740 --> 00:16:25,120
因为这个直接是操作电机,

322
00:16:25,280 --> 00:16:27,840
这个代码也非常简单,上面

323
00:16:27,840 --> 00:16:30,520
是定义两个,就是ADC

324
00:16:30,520 --> 00:16:35,660
和蓝莓的引脚,下面是

325
00:16:35,660 --> 00:16:38,240
初始化的tranq,和

326
00:16:38,240 --> 00:16:41,440
打印一个字符,循环里

327
00:16:41,440 --> 00:16:44,760
面就可以通过读取的,这里

328
00:16:44,760 --> 00:16:49,100
是接了一个软码器,然后

329
00:16:49,100 --> 00:16:52,320
选码器,可以通过选码

330
00:16:52,320 --> 00:16:53,520
器来操作电机。

331
00:16:55,500 --> 00:17:08,830
你也可以看一下,代

332
00:17:08,830 --> 00:17:09,850
码就这样。

333
00:17:13,900 --> 00:17:15,380
这里使用的tranq是

334
00:17:15,380 --> 00:17:17,760
tranq2,因为tranq

335
00:17:17,760 --> 00:17:19,300
1现在是被大核占用

336
00:17:19,300 --> 00:17:21,400
着,所以我们现在用了tran

337
00:17:21,400 --> 00:17:24,380
q2,可以看到那个程序已经

338
00:17:24,380 --> 00:17:27,260
运行起来了,然后我们可以通

339
00:17:27,260 --> 00:17:33,000
过旋转这个,来进行,通

340
00:17:33,000 --> 00:17:34,620
过读取这个旋转值来

341
00:17:34,620 --> 00:17:41,310
进行旋转,这个是PW

342
00:17:41,310 --> 00:17:47,600
M的接口,用PWM

343
00:17:47,600 --> 00:17:48,760
模块我们可以操作更多

344
00:17:48,760 --> 00:17:52,960
的点击,像DOOR256

345
00:17:52,960 --> 00:17:55,600
的话,已经提供了12个接

346
00:17:55,600 --> 00:17:58,740
口的PWM,我们可以去

347
00:17:58,740 --> 00:18:01,840
做机械臂,可以去做机

348
00:18:01,840 --> 00:18:02,900
器人,都是可以的。

349
00:18:06,010 --> 00:18:08,470
然后iPhoneC的话,iPhoneC

350
00:18:08,470 --> 00:18:10,030
和SPI是非常常用的

351
00:18:10,030 --> 00:18:13,970
两个接口,它的函数可能

352
00:18:13,970 --> 00:18:16,390
比刚才的几个接口

353
00:18:16,390 --> 00:18:18,690
的函数都比较多,但是

354
00:18:18,690 --> 00:18:21,990
这里面其实有用的,或者也

355
00:18:21,990 --> 00:18:23,830
比较有用的,其实是我们

356
00:18:23,830 --> 00:18:26,730
经常用到的,也就是这

357
00:18:26,730 --> 00:18:30,670
些,这个是MacBook上面

358
00:18:30,670 --> 00:18:35,310
的,自己自测的一个程序,

359
00:18:35,430 --> 00:18:37,110
这个程序是自读自写,

360
00:18:37,510 --> 00:18:39,470
这个我们就不运行了,然后运

361
00:18:39,470 --> 00:18:42,730
去的可以自己去运行,然后

362
00:18:42,730 --> 00:18:44,170
我们在iPhoneC上,我们主

363
00:18:44,170 --> 00:18:46,150
要是去做iPhoneC操

364
00:18:46,150 --> 00:18:48,090
作OLED屏幕的测试,

365
00:18:49,390 --> 00:18:52,430
这里面就是需要去适配各

366
00:18:52,430 --> 00:18:59,710
种iPhoneC的库,像这个

367
00:18:59,710 --> 00:19:02,450
SSD1306的库,它其实

368
00:19:02,450 --> 00:19:05,370
对其他的芯片都做了

369
00:19:05,370 --> 00:19:07,170
适配,然后我们这边只是做

370
00:19:07,170 --> 00:19:08,130
一个简单的适配,让它

371
00:19:08,130 --> 00:19:10,510
可以边缘通过,就可以运行

372
00:19:10,510 --> 00:19:10,810
起来。

373
00:19:10,810 --> 00:19:12,930
然后这边的例子是直接

374
00:19:12,930 --> 00:19:17,170
用的那种OLED的例

375
00:19:17,170 --> 00:19:17,870
子。

376
00:19:39,920 --> 00:19:42,440
可以看到现在程序的实现,

377
00:19:42,740 --> 00:19:46,020
其实和之前直接用简单接

378
00:19:46,020 --> 00:19:48,300
口,已经有很大的差别了。

379
00:19:49,700 --> 00:19:52,440
这里直接是读取,就是使用

380
00:19:52,440 --> 00:19:56,680
iPhoneCR去进行操作,

381
00:19:57,180 --> 00:19:59,960
连接上其实这里是iPhone

382
00:19:59,960 --> 00:20:01,520
CR,去连接这个屏幕。

383
00:20:03,040 --> 00:20:05,760
然后这个是使用,其实是使

384
00:20:05,760 --> 00:20:10,860
用转成C素组,图片

385
00:20:10,860 --> 00:20:12,540
转成C素组来实现,

386
00:20:12,740 --> 00:20:14,200
但是如果用其他库的话,可能

387
00:20:14,200 --> 00:20:15,840
可以直接去显示。

388
00:20:19,540 --> 00:20:22,400
因为是用了库,所以像i

389
00:20:22,400 --> 00:20:23,320
PhoneCR的接口,我们在这里

390
00:20:23,320 --> 00:20:24,940
面其实已经看不见了,它

391
00:20:24,940 --> 00:20:26,940
直接已经分装成各种类,

392
00:20:27,300 --> 00:20:28,500
然后我们可以直接去调用这

393
00:20:28,500 --> 00:20:30,520
些接口,就可以去操作这个

394
00:20:30,520 --> 00:20:30,880
屏幕。

395
00:20:53,820 --> 00:20:56,960
这里可以看到,程序其实已经更

396
00:20:56,960 --> 00:21:01,240
新上去了,当然我们也可以试试

397
00:21:01,240 --> 00:21:05,780
其他的,直接去,这是一个动态

398
00:21:05,780 --> 00:21:08,200
图片,动态图片是不

399
00:21:08,200 --> 00:21:13,080
断的去切换数据的

400
00:21:13,080 --> 00:21:16,800
值,如果只是想显示一次的话,

401
00:21:16,900 --> 00:21:18,160
我们就不用在Loop里面

402
00:21:18,160 --> 00:21:22,120
去操作,我们直接显示一

403
00:21:22,120 --> 00:21:23,240
张就可以了。

404
00:21:29,430 --> 00:21:31,870
当然这里面就需要有更多

405
00:21:31,870 --> 00:21:33,830
的库座适配,这也是我们

406
00:21:33,830 --> 00:21:38,190
希望大家来玩,iOS和i

407
00:21:38,190 --> 00:21:41,350
Phone的一个,就是有更

408
00:21:41,350 --> 00:21:43,110
多的库能被提到,或者

409
00:21:43,110 --> 00:21:44,530
是覆盖更多的库。

410
00:21:46,720 --> 00:21:48,380
然后SPI这边的话,SPI

411
00:21:48,380 --> 00:21:50,360
的接口可能要更加少

412
00:21:50,360 --> 00:21:52,080
一点,iPhone SE更加少一点,

413
00:21:52,200 --> 00:21:53,700
但是它的动能可能比iPhone

414
00:21:53,700 --> 00:21:54,700
SE更加多一点。

415
00:21:55,080 --> 00:21:56,740
iPhone SE因为要操作地

416
00:21:56,740 --> 00:22:01,060
址,SPI就不需要,SPI

417
00:22:01,060 --> 00:22:04,380
的话,它其实是可以直接去用

418
00:22:04,380 --> 00:22:09,180
CS去使能,相应的SP

419
00:22:09,180 --> 00:22:12,060
I的设备进行操作。

420
00:22:13,600 --> 00:22:14,800
然后这个例子是简单的

421
00:22:14,800 --> 00:22:17,440
一个传输,也是在MacOS的

422
00:22:17,440 --> 00:22:18,640
手机里面。

423
00:22:19,140 --> 00:22:22,580
然后我们要使用的是TFTP

424
00:22:22,580 --> 00:22:25,040
的例子,然后主要用到

425
00:22:25,040 --> 00:22:28,460
的库就是TFTP ESPI,然后

426
00:22:28,460 --> 00:22:30,080
界限上可以看到更加复

427
00:22:30,080 --> 00:22:34,880
杂一点,除了正常的电

428
00:22:34,880 --> 00:22:39,040
源,然后CS,CS DC,CS是做

429
00:22:39,040 --> 00:22:41,220
片选,然后DC是发明力,

430
00:22:41,820 --> 00:22:45,140
然后还包括Reset和背光,

431
00:22:45,220 --> 00:22:46,700
这个背光其实是可选的,

432
00:22:47,420 --> 00:22:49,300
然后主要的两个数据

433
00:22:49,300 --> 00:22:54,820
传输的线路,一个是CR

434
00:22:54,820 --> 00:22:58,820
K的,一个是MOSI的,

435
00:23:00,060 --> 00:23:03,100
然后在TFTP ESPI库里

436
00:23:03,100 --> 00:23:04,220
面,我们也要做相应的

437
00:23:04,220 --> 00:23:08,780
适配,这个是一个常见适

438
00:23:08,780 --> 00:23:11,120
配,不管是只要是有新

439
00:23:11,120 --> 00:23:13,700
的屏幕加入,都是要做简

440
00:23:13,700 --> 00:23:15,060
单适配,一个是去修改

441
00:23:15,060 --> 00:23:18,000
它的Rooster Set的文件,

442
00:23:18,560 --> 00:23:19,960
然后适配驱动,然后适配

443
00:23:19,960 --> 00:23:25,620
相应的Pin脚,然后一些

444
00:23:25,620 --> 00:23:29,200
要用到的字符库,然后

445
00:23:29,200 --> 00:23:31,220
编译的时候,我们也会发生

446
00:23:31,220 --> 00:23:36,120
一些问题,这个是对各种型

447
00:23:36,120 --> 00:23:38,900
号的适配,没有加入SDR

448
00:23:38,900 --> 00:23:47,100
M插放,然后TFTP的话,可能

449
00:23:47,100 --> 00:23:50,480
就有了更多有趣的

450
00:23:50,480 --> 00:23:56,500
例子,比如说我们正常的

451
00:23:56,500 --> 00:23:59,980
职业使用例子,TFTP

452
00:23:59,980 --> 00:24:03,740
的选择这里面的任意

453
00:24:03,740 --> 00:24:14,880
例子,比如说时空,这个

454
00:24:14,880 --> 00:24:35,310
原屏是TFTP,可以

455
00:24:35,310 --> 00:24:39,310
看到官方屏幕的例子,

456
00:24:39,410 --> 00:24:42,570
基本上已经可以运行,当然其

457
00:24:42,570 --> 00:24:52,140
他的包括其他的例子,其实都是

458
00:24:52,140 --> 00:24:54,420
可以运行的,只要做简

459
00:24:54,420 --> 00:24:56,940
单的适配就可以了,目前只

460
00:24:56,940 --> 00:24:58,960
要做一些修复编译的

461
00:24:58,960 --> 00:25:00,820
适配就可以了,当然这里面有

462
00:25:00,820 --> 00:25:04,560
一个问题,TFT ESPI的其实

463
00:25:04,560 --> 00:25:06,340
是对各个版是有优

464
00:25:06,340 --> 00:25:08,460
化的,目前我们用的是最简

465
00:25:08,460 --> 00:25:11,260
单的,没有优化过的接

466
00:25:11,260 --> 00:25:15,540
口,所以这个可能是一个测试,

467
00:25:17,460 --> 00:25:19,700
这个可能速度上可能比较

468
00:25:19,700 --> 00:25:27,240
慢一点,当然在TFT ESPI

469
00:25:27,240 --> 00:25:29,940
这个基础上,我们其实是可以

470
00:25:29,940 --> 00:25:33,620
去运行更加复杂的

471
00:25:33,620 --> 00:25:40,160
库,比如说像LVGL的

472
00:25:40,160 --> 00:25:44,720
例子,这个其实直接是从库

473
00:25:44,720 --> 00:25:54,040
获取LVGL,这里已经安

474
00:25:54,040 --> 00:25:56,360
装了,当然我没有更新是

475
00:25:56,360 --> 00:25:56,980
因为9.

476
00:25:57,100 --> 00:25:59,900
0的有比较大的改动,

477
00:26:00,020 --> 00:26:00,840
现在还是用了8.

478
00:26:00,960 --> 00:26:15,780
3的版本,这个

479
00:26:15,780 --> 00:26:19,840
可能编译时间非常长,编译

480
00:26:19,840 --> 00:26:23,700
时间非常长,我们先回到那个,

481
00:26:24,700 --> 00:26:28,640
SPI这边的话,TFT ES

482
00:26:28,640 --> 00:26:31,240
PI是常用的库,这个我们

483
00:26:31,240 --> 00:26:32,780
希望后面做进一步的

484
00:26:32,780 --> 00:26:36,980
优化,然后因为我们用到了L

485
00:26:36,980 --> 00:26:40,420
VGL,或者是其他的一些比

486
00:26:40,420 --> 00:26:41,839
较大型的库,这里面会

487
00:26:41,839 --> 00:26:45,619
有内存不够的现象,

488
00:26:45,780 --> 00:26:47,220
如何去调整内存,也就是

489
00:26:47,220 --> 00:26:49,660
刚才说的,是和大核

490
00:26:49,660 --> 00:26:51,140
去分享内存的,所以只要

491
00:26:51,140 --> 00:26:53,680
去修改RTOS的内

492
00:26:53,680 --> 00:26:56,740
存,不管是调到调度,当然

493
00:26:56,740 --> 00:26:59,220
我没有调很大,调到比

494
00:26:59,220 --> 00:27:02,280
较大的一个值,目前都是可以的。

495
00:27:03,600 --> 00:27:05,140
然后调整镜像,只要调

496
00:27:05,140 --> 00:27:08,220
整一下镜像里面,就是M

497
00:27:08,220 --> 00:27:12,380
EMAP的数值,以及去调

498
00:27:12,380 --> 00:27:14,680
整一下源码里面,源码

499
00:27:14,680 --> 00:27:18,120
里面链接文件,链接

500
00:27:18,120 --> 00:27:20,180
文件的起始地址和

501
00:27:20,180 --> 00:27:23,940
结束的长度,这样就可以了,

502
00:27:24,020 --> 00:27:25,280
生成了新的镜像就可以

503
00:27:25,280 --> 00:27:27,420
运行在大内存里面。

504
00:27:29,120 --> 00:27:43,500
我们可以看一下,这个

505
00:27:45,960 --> 00:27:51,760
编译是非常,因为你可以看到,编

506
00:27:51,760 --> 00:27:53,160
的东西是非常多的,不

507
00:27:53,160 --> 00:28:01,940
光有库,还有一些,不

508
00:28:05,820 --> 00:28:11,440
怎么清楚,这是最基础的一个

509
00:28:11,440 --> 00:28:16,840
显示,然后包括它的比较普

510
00:28:16,840 --> 00:28:22,180
通的例子,都可以编译

511
00:28:22,180 --> 00:28:22,820
和运行。

512
00:28:25,440 --> 00:28:28,080
这个因为我们是基于TFT

513
00:28:28,080 --> 00:28:30,320
ESPI库的,然后现在Trans

514
00:28:30,320 --> 00:28:33,120
form,那个库没有做非常深入

515
00:28:33,120 --> 00:28:35,780
的优化,所以性能上还是

516
00:28:35,780 --> 00:28:39,560
比较有限的,然后像这个

517
00:28:39,560 --> 00:28:42,980
Music的最后的FPS,大概

518
00:28:42,980 --> 00:28:45,500
是三十几,当然在大核

519
00:28:45,500 --> 00:28:47,580
上可能可以达到一百多,

520
00:28:54,000 --> 00:28:54,880
不等这个。

521
00:28:59,160 --> 00:29:04,260
然后,就是在未来中,我们希望

522
00:29:04,260 --> 00:29:05,780
有更多的实际上的

523
00:29:05,780 --> 00:29:07,580
贡献者,或者是玩家来

524
00:29:07,580 --> 00:29:11,240
参与我们的Arduino的开

525
00:29:11,240 --> 00:29:13,340
发中,做更多的自由化,

526
00:29:13,660 --> 00:29:15,960
适配更多的板子,就

527
00:29:15,960 --> 00:29:17,960
提出更多的需求,适

528
00:29:17,960 --> 00:29:21,380
配更多的环境,然后我们

529
00:29:21,380 --> 00:29:22,860
对一些SATA接口也会

530
00:29:22,860 --> 00:29:25,520
进行适配,包括那个路上

531
00:29:25,520 --> 00:29:29,340
的Camera,包括其他的SDR之

532
00:29:29,340 --> 00:29:31,340
类的一些接口,如果需要的话。

533
00:29:33,810 --> 00:29:37,250
然后还有一件事情就是,刚才宣

534
00:29:37,250 --> 00:29:39,310
布了那个甲醛计划,比

535
00:29:39,310 --> 00:29:40,750
亚科技正式加入甲醛

536
00:29:40,750 --> 00:29:41,090
计划。

537
00:29:42,870 --> 00:29:44,670
今天我介绍的路上设

538
00:29:44,670 --> 00:29:44,790
计。

539
00:29:51,830 --> 00:29:54,310
非常感谢俊强的分享。

540
00:29:55,590 --> 00:29:58,170
如果大家有问题的话,也可以欢迎

541
00:29:58,170 --> 00:29:59,710
在聊天窗口,或者是在

542
00:29:59,710 --> 00:30:00,910
Bilibili的弹幕上进

543
00:30:00,910 --> 00:30:02,110
行讨论。

544
00:30:02,350 --> 00:30:03,870
另外我们也看到聊天窗口

545
00:30:03,870 --> 00:30:06,630
当中,大家已经在进行了热

546
00:30:06,630 --> 00:30:08,390
烈的讨论,俊强可以看一下

547
00:30:08,390 --> 00:30:10,650
聊天窗口,看看有哪些

548
00:30:10,650 --> 00:30:13,210
是可以直接回答的,我们可以

549
00:30:13,210 --> 00:30:14,330
通过语音的方式来

550
00:30:14,330 --> 00:30:15,750
交流,也可以通过后续的

551
00:30:15,750 --> 00:30:17,370
文字,聊天窗口当中

552
00:30:17,370 --> 00:30:18,050
进行回复。

553
00:30:21,330 --> 00:30:24,110
另外我们有专门的小编,

554
00:30:24,290 --> 00:30:26,030
负责把Bilibili上的

555
00:30:26,030 --> 00:30:28,190
弹幕,提问也转发到

556
00:30:28,190 --> 00:30:28,690
这边来。

557
00:30:30,030 --> 00:30:32,430
那我从最开始的回答

558
00:30:32,430 --> 00:30:34,630
吧,就是银角铭都有什么,这

559
00:30:34,630 --> 00:30:39,810
部分其实在那个,在这边

560
00:30:39,810 --> 00:30:43,770
其实都有,Pin的直接是物

561
00:30:43,770 --> 00:30:46,210
理Pin,然后只要用物

562
00:30:46,210 --> 00:30:47,750
理Pin,其实都可以进行

563
00:30:47,750 --> 00:30:48,130
操作。

564
00:30:49,410 --> 00:30:51,370
然后大小和之间,有的

565
00:30:51,370 --> 00:30:53,550
在源码的文档里面

566
00:30:53,550 --> 00:30:57,290
有,但是目前大小和的通

567
00:30:57,290 --> 00:30:58,930
讯,是基于原来实现

568
00:30:58,930 --> 00:31:02,870
的,大小和通讯的方

569
00:31:02,870 --> 00:31:05,730
式,用C,7D,Q的方

570
00:31:05,730 --> 00:31:08,410
式,然后这个可能我们后面,可能

571
00:31:08,410 --> 00:31:10,530
会改成Mirrorbox的

572
00:31:10,530 --> 00:31:14,670
方式,然后目前基于原来

573
00:31:14,670 --> 00:31:16,210
的那个方式,是可以延续

574
00:31:16,210 --> 00:31:26,130
通讯的,然后目前通过US

575
00:31:26,130 --> 00:31:32,180
B模拟窗口烧息,其

576
00:31:32,180 --> 00:31:41,100
他好像没什么问题,其他那个,

577
00:31:42,000 --> 00:31:43,680
比如说B站还有什么问题吗?

578
00:31:48,850 --> 00:31:51,350
好的,我们这次演讲的录

579
00:31:51,350 --> 00:31:52,750
像,后面也会上传到

580
00:31:52,750 --> 00:31:54,530
Bilibili,然后如果大家有问题,

581
00:31:54,530 --> 00:31:56,250
也欢迎在后续看录

582
00:31:56,250 --> 00:31:58,230
像的时候,通过B站的评

583
00:31:58,230 --> 00:32:01,070
论区进行留言提问,我们

584
00:32:01,070 --> 00:32:02,930
会定期的会将这些

585
00:32:02,930 --> 00:32:04,230
问题,传递给演讲者。
